// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

model Course {
  id String @id @default(uuid())
  userId String
  title String @db.Text
  description String? @db.Text
  imageUrl String ? @db.Text
  price Float?
  isPublished Boolean @default(false)

  categoryId String?
  attachments Attachment[]
  chapters Chapter[]
  purchases Purchase[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  category Category? @relation(fields: [categoryId], references: [id])

  @@index([categoryId])
  @@fulltext([title])
}

model Category {
  id String @id @default(uuid())
  name String @unique
  courses Course[]
}

model Attachment {
  id String @id @default(uuid())
  name String
  url String @db.Text
  courseId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@index([courseId])
}

model Chapter {
  id String @id @default(uuid())
  title String
  description String? @db.Text
  videoUrl String? @db.Text
  position Int
  isPublished Boolean @default(false)
  isFree Boolean @default(false)
  courseId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
  userProgress UserProgress[]

  muxData MuxData?

  @@index([courseId])
}

model UserProgress {
  id String @id @default(uuid())
  userId String?
  chapterId String
  isCompleted Boolean @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  chapter Chapter @relation(fields: [chapterId], references: [id], onDelete: Cascade)

  @@index([chapterId])
  @@unique([chapterId, userId])
}

model MuxData {
  id String @id @default(uuid())
  assetId String 
  playbackId String?
  chapterId String @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  chapter Chapter @relation(fields: [chapterId], references: [id], onDelete: Cascade)
}

model Purchase {
  id String @id @default(uuid())
  userId String
  courseId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@unique([userId,courseId])
  @@index([courseId])
}

model StripeCustomer {
  id String @id @default(uuid())
  userId String @unique
  stripeCustomerId String @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
